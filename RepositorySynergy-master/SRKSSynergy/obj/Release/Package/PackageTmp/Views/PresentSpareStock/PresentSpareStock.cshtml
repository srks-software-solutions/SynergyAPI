@model IList<SRKSSynergy.Models.ProductModelSpare>
@using SRKSSynergy.Helpers
@{
	
    ViewBag.Title = "PresentSpareStock";
}

@{int slno = 1;}
@* Paging & Sorting Code  *@

@*@helper buildLinks(int start, int end, string innerContent)
{
    for (int i = start; i <= end; i++)
    {
    <a class="@(i == ViewBag.CurrentPage ? "current" : "")"  href="@Url.Action("PresentSpareStock", "PresentSpareStock", new { page = i, sortBy = ViewBag.sortBy, isAsc = ViewBag.isAsc.ToString().ToLower(), search = ViewBag.Search })">@(innerContent ?? i.ToString())</a>      
    }
    
}


@helper pageLinks()
{
    const int maxPages = 11;

    if (ViewBag.TotalPages <= maxPages)
    {
    @buildLinks(1, (int)ViewBag.TotalPages, null)
        return;
    }

    int pagesAfter = ViewBag.TotalPages - ViewBag.CurrentPage; // Number of pages after current
    int pagesBefore = ViewBag.CurrentPage - 1; // Number of pages before current

    if (pagesAfter <= 4)
    {
    @buildLinks(1, 1, null) // Show 1st page

        int pageSubset = ViewBag.TotalPages - maxPages - 1 > 1 ? ViewBag.TotalPages - maxPages - 1 : 2;
    @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

    @buildLinks(ViewBag.TotalPages - maxPages + 3, ViewBag.TotalPages, null) // Show last pages

        return; // Exit
    }

    if (pagesBefore <= 4)
    {
    @buildLinks(1, maxPages - 2, null) // Show 1st pages


        int pageSubset = maxPages + 2 < ViewBag.TotalPages ? maxPages + 2 : ViewBag.TotalPages - 1;
    @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

    @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page

        return; // Exit

    }

    if (pagesAfter > 4)
    {
    @buildLinks(1, 1, null) // Show 1st pages

        int pageSubset1 = ViewBag.CurrentPage - 7 > 1 ? ViewBag.CurrentPage - 7 : 2;
        int pageSubset2 = ViewBag.CurrentPage + 7 < ViewBag.TotalPages ? ViewBag.CurrentPage + 7 : ViewBag.TotalPages - 1;

    @buildLinks(pageSubset1, pageSubset1, pageSubset1 == ViewBag.CurrentPage - 4 ? null : "...") // Show 1st page subset (...)

    @buildLinks(ViewBag.CurrentPage - 3, ViewBag.CurrentPage + 3, null) // Show middle pages

        // Show 2nd page subset (...)
        // only show ... if page is contigous to the previous one.
    @buildLinks(pageSubset2, pageSubset2, pageSubset2 == ViewBag.CurrentPage + 4 ? null : "...")
    @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page

        return; // Exit

    }    
}*@

@helper sortLink(string name, int id)
{
    <a href="@Url.Action("PresentSpareStock", "PresentSpareStock", new { sortby = id, isasc = (id == ViewBag.sortBy ? (!@ViewBag.isAsc).ToString().ToLower() : true) })">@name</a> 
    if (id == ViewBag.sortBy)
    {
    <span class="arrow @(ViewBag.isAsc ? "up" : "down")"></span>
    }
}
<link href="~/Content/bootstrap/css/bootstrap-responsive.css" rel="stylesheet" />
<link href="~/Content/bootstrap/css/bootstrap.css" rel="stylesheet" />
<link href="~/Content/bootstrap/css/MDB.css" rel="stylesheet" />
<link href="~/Content/bootstrap/css/jquery.ui.autocomplete.css" rel="stylesheet" />
<script src="~/Content/bootstrap/js/jquery-1.9.1.js"></script>
<script src="~/Content/bootstrap/js/jquery1.8.2.min.js"></script>
<script src="~/Content/bootstrap/js/jquery-ui-1.10.3.js"></script>
<script src="~/Content/bootstrap/js/bootstrap.js"></script>
@Scripts.Render("~/bundles/jqueryval")

<div class="bcgr" style="min-width: 1000px">
    <div style="background: gray; padding-bottom: 15px">
        <p class="txtft">Spare Stock Management</p>
    </div>
    <form action="@Url.Action("PresentSpareStock", "PresentSpareStock")" method="get" id="form1">

        @*Table Data Starts Here*@
        <table class="table table-hover" style="width: 100%;">
            <tr style="background: #BBBEBD; padding-bottom: 10px; padding-top: 10px">

            <thead>
                <tr style="background: #BBBEBD">
                    <th style="width: 80px; text-align: center">
                        <span style="font-family: Calibri; font-size: 18px; padding-bottom: 10px; padding-top: 10px">Serial No.</span>
                    </th>
                    <th style="width: 80px; text-align: center">
                        <span style="font-family: Calibri; font-size: 18px; padding-bottom: 10px; padding-top: 10px">Part Number</span>
                    </th>
                    <th style="width: 80px; text-align: center">
                        <span style="font-family: Calibri; font-size: 18px; padding-bottom: 10px; padding-top: 10px">Description</span>
                    </th>
                    <th style="width: 80px; text-align: center">
                        <span style="font-family: Calibri; font-size: 18px; padding-bottom: 10px; padding-top: 10px">Present Stock</span>
                    </th>
                </tr>
            </thead>

            @if (Model != null)
            {
                for (int i = 0; i < Model.Count; i++)
                {
                <tr>
                    <td style="width: 80px; text-align: center; font-family: Calibri; font-size: 18px">
                        @slno
                    </td>
                    <td style="width: 250px; text-align: center; font-family: Calibri; font-size: 18px">
                        @Html.DisplayFor(m => m[i].ProductModelSparesName)
                    </td>
                    <td style="width: 250px; text-align: center; font-family: Calibri; font-size: 18px">
                        @Html.DisplayFor(m => m[i].ProductModelSparesDesc)
                    </td>
                    <td style="width: 250px; text-align: center; font-family: Calibri; font-size: 18px">
                        @Html.DisplayFor(m => m[i].BuhlerPresentStock)
                    </td>

                </tr>
                    slno++;
                }
            }

        </table>
       @* <div class="pagination" style="font-size: 18px; font-family: Calibri; float: right; padding-right: 70px">
            Page: 
            @pageLinks()
        </div>*@
@*</div>*@

</form>
</div>
